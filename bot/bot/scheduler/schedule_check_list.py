from datetime import datetime, timedelta

from aiogram import Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey

from bot.services import points_service, users_service, schedules_service
from bot import keyboards


list_opening_shift = [
    '–ì–æ—Å—Ç–µ–≤–∞—è –¥–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞ üì∑',
    '–ó–∞—è–≤–∫–∏ —Å –¥—Ä—É–≥–∏—Ö —Ç–æ—á–µ–∫ –ø—Ä–∏–Ω—è—Ç—ã ‚òëÔ∏è',
    '–ú—É–∑—ã–∫–∞ –≤ –∑–∞–ª–µ –≤–∫–ª—é—á–µ–Ω–∞ ‚òëÔ∏è',
    '–°—Ç–æ–ø-–ª–∏—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚òëÔ∏è',
    '–ö–∞—Å—Å–æ–≤–∞—è —Å–º–µ–Ω–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ ‚òëÔ∏è',
    '–ü—Ä–∏–ª–µ–≥–∞—é—â–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è —á–∏—Å—Ç–∞—è üì∑',
    '–ó–æ–Ω–∞ –º–æ–π–∫–∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ üì∑',
    '–ó–æ–Ω–∞ —Ñ—Ä–∏—Ç—é—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ üì∑',
    '–í–æ–∫ —Å—Ç–∞–Ω—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ üì∑',
    '–¢–µ–ª–µ—Ñ–æ–Ω—ã —Å–¥–∞–Ω—ã (–∫—Ä–æ–º–µ —Å—Ç. –ø–æ–≤–∞—Ä–∞ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞) üì∑',
    '–ö–æ—Ä–∏–¥–æ—Ä —É–±—Ä–∞–Ω üì∑',
    '–†–∞–∑–¥–µ–≤–∞–ª–∫–∞ —á–∏—Å—Ç–∞—è üì∑',
    '–¢—É–∞–ª–µ—Ç —á–∏—Å—Ç—ã–π üì∑',
    '–ó–∞–≥–æ—Ç–æ–≤–∫–∞ —á–∏—Å—Ç–∞—è –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ üì∑',
    '–ö—É—Ö–Ω—è —á–∏—Å—Ç–∞—è –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ üì∑',
    '–û–∫–Ω–æ –≤ –∑–∞–ª–µ –æ—Ç–∫—Ä—ã—Ç–æ –≤ –Ω–∞—á–∞–ª–µ –¥–Ω—è –¥–ª—è –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏—è üì∑',
    '–õ–æ–≥–æ—Ç–∏–ø –≤–∫–ª—é—á–µ–Ω üì∑',
    '–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –∫–æ–ª–∞ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µüì∑',
    '–ü—Ä–∏—Ç–æ–∫ –≤–∫–ª—é—á–µ–Ω (–µ—Å–ª–∏ –Ω–µ—Ç - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å) üì∑',
    '–£–ª–∏—Ü–∞ —É–±—Ä–∞–Ω–∞, —É–ª–∏—á–Ω—ã–π –±–∞–∫ —á–∏—Å—Ç—ã–π üì∑',
    '–í—Ö–æ–¥ –¥–ª—è –≥–æ—Å—Ç–µ–π —É–±—Ä–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ üì∑',
    '–õ–µ—Å—Ç–Ω–∏—á–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ - —á–∏—Å—Ç–∞—è üì∑',
    '–ú—É—Å–æ—Ä–∞ –Ω–∞ –±–∞–ª–∫–æ–Ω–µ –Ω–µ—Ç üì∑',
    '–î–≤–µ—Ä—å –≤ —Ü–µ—Ö –∑–∞–∫—Ä—ã—Ç–∞ üì∑',
    '–ú—É—Å–æ—Ä–∞ –Ω–∞ –ª–µ—Å—Ç–Ω–∏—á–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ –Ω–µ—Ç ( –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ –ò—Ä–µ) üì∑',
    '–ù–æ–∂–∫–∏ —Å—Ç–æ–ª–æ–≤ –∏ —Å—Ç—É–ª—å–µ–≤ —á–∏—Å—Ç—ã–µ üì∑',
    '–ú—É—Å–æ—Ä–Ω—ã–π –±–∞–∫ –≤—ã–º—ã—Ç üì∑',
    '–í–æ–¥–∞ —Å –±—É—Ç—ã–ª–∫–µ –µ—Å—Ç—å(–¥–ª—è –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã) ‚òëÔ∏è',
    '–§–æ—Ç–æ –≤–µ—Å–æ–≤ –ø–æ–≤–∞—Ä—Å–∫–∏–µ –∏ –∫–∞—Å—Å–∏—Ä—Å–∫–∏–µ üì∑',
    '"–¢–µ—Å—Ç –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω—É–º–µ—Ä–∞—Ü–∏–∏" ‚òëÔ∏è',
    '–ö–∞–ª–∏—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ üì∑',
]

list_closing_shift = [
    '–ó–æ–Ω–∞ —Å–±–æ—Ä–∫–∏ —á–∏—Å—Ç–∞—è üì∑',
    '–ó–æ–Ω–∞ –≤–æ–∫ —á–∏—Å—Ç–∞—è üì∑',
    '–ó–æ–Ω–∞ —Ñ—Ä–∏—Ç—é—Ä —á–∏—Å—Ç–∞—è üì∑',
    '–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞ –∑–∞–º—ã—Ç–∞ —Å–ø–µ—Ü —Ö–∏–º–∏–µ–π üì∑',
    '–°—É–º–∫–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–æ–∫ –∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–≤ –ø—É—Å—Ç–∞—è üì∑',
    '–ü—Ä–∏—Ç–æ–∫ –∏ –≤—ã—Ç—è–∂–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω—ã üì∑',
    '–ó–∞–ª —É–±—Ä–∞–Ω, –ø–æ–ª—ã –≤ –∑–∞–ª–µ –∑–∞–º—ã—Ç—ã üì∑',
    '–ó–æ–Ω–∞ –º–æ–π–∫–∏ —á–∏—Å—Ç–∞—è üì∑',
    '–ü–æ–ª—ã –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏ –≤—ã–º—ã—Ç—ã üì∑',
    '–í—ã—Ç—è–∂–∫–∞ –∑–∞–º—ã—Ç–∞ üì∑',
    '–°–≤–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω üì∑',
    '–°—Ç–µ–Ω—ã —á–∏—Å—Ç—ã–µ (–∫–∞—Å—Å–æ–≤–∞—è –∑–æ–Ω–∞) üì∑',
    '–†–µ–∑–∏–Ω–∫–∏ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞ –∫–æ–ª–∞ - —á–∏—Å—Ç—ã–µ üì∑',
    '–†–µ–∑–∏–Ω–∫–∏ —Ö–æ–ª–æ–¥–∏–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤ - —á–∏—Å—Ç—ã–µ üì∑',
    '–ö–æ—Ä–∏–¥–æ—Ä –∑–∞–º—ã—Ç –Ω–∞ –Ω–æ—á—å üì∑',
    '–¢—É–∞–ª–µ—Ç –∑–∞–º—ã—Ç –Ω–∞ –Ω–æ—á—å üì∑',
    '–ú—É—Å–æ—Ä —Å –±–∞–ª–∫–æ–Ω–∞ –≤—ã–Ω–µ—Å–µ–Ω –Ω–∞ –ø–ª–æ—â–∞–¥–∫—É üì∑'
    '–•–æ–ª–¥–µ—Ä—ã –∑–∞–º—ã—Ç—ã üì∑',
    '–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞ —á–∏—Å—Ç–∞—è üì∑',
    '–ü–æ–¥ –ª–µ—Å—Ç–Ω–∏—Ü–µ–π –≤ –∑–∞–ª–µ –≤—ã–º—ã—Ç–æ üì∑',
    '–ù–æ–∂–∫–∏ —Å—Ç–æ–ª–æ–≤ –∏ —Å—Ç—É–ª—å–µ–≤ —á–∏—Å—Ç—ã–µ üì∑',
    '–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏ —Ñ–æ—Ç–æ –≤–Ω—É—Ç—Ä–∏ üì∑',
    '–ï–º–∫–æ—Å—Ç–∏ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ üì∑',
]

async def schedule_opening_shift(bot: Bot, apscheduler, storage):
    today = datetime.today().date()
    date_string = today.strftime('%Y-%m-%d')
    schedules = await schedules_service.get_by_date(date=date_string)


    for schedule in schedules:
        user = await users_service.get_by_name(schedule['name'])
        if user['role']['name'] == '–ú–µ–Ω–µ–¥–∂–µ—Ä':
            time = schedule['startTime']
            time_obj = datetime.strptime(time, "%H:%M:%S").time()
            datetime_obj = datetime.combine(datetime.now().date(), time_obj)
            new_time = datetime_obj - timedelta(minutes=30)
            tg_id = user['tgId']

            apscheduler.add_job(
                send_opening_shift,
                'date',
                run_date=new_time,
                kwargs={'bot': bot, 'tgId': tg_id, 'storage': storage},
                id=str(tg_id),
                replace_existing=True
            )
        else:
            continue


async def send_opening_shift(bot: Bot, tgId: int, storage):
    state = FSMContext(
        storage=storage,
        key=StorageKey(chat_id=tgId, user_id=tgId, bot_id=bot.id)
    )
    await state.update_data(check_list_shift=list_opening_shift, check_list_text='–ß–µ–∫-–ª–∏—Å—Ç - –æ—Ç–∫—Ä—ã—Ç–∏–µ')

    await bot.send_message(
        chat_id=tgId,
        text='–ß–µ–∫-–ª–∏—Å—Ç - –æ—Ç–∫—Ä—ã—Ç–∏–µ',
        reply_markup=await keyboards.check_list.check_list_keyboard(list_opening_shift, 0)
    )

async def schedule_closing_shift(bot: Bot, apscheduler, storage):
    today = datetime.today().date()
    date_string = today.strftime('%Y-%m-%d')
    schedules = await schedules_service.get_by_date(date=date_string)

    for schedule in schedules:
        user = await users_service.get_by_name(schedule['name'])
        if user['role']['name'] == '–ú–µ–Ω–µ–¥–∂–µ—Ä':
            time = schedule['endTime']
            time_obj = datetime.strptime(time, "%H:%M:%S").time()
            datetime_obj = datetime.combine(datetime.now().date(), time_obj)
            new_time = datetime_obj - timedelta(minutes=30)
            tg_id = user['tgId']


            apscheduler.add_job(
                send_closing_shift,
                'date',
                run_date=new_time,
                kwargs={'bot': bot, 'tgId': tg_id, 'storage': storage},
                id=tg_id,
                replace_existing=True
            )
        else:
            continue


async def send_closing_shift(bot: Bot, tgId: int, storage):
    state = FSMContext(
        storage=storage,
        key=StorageKey(chat_id=tgId, user_id=tgId, bot_id=bot.id)
    )
    await state.update_data(check_list_shift=list_closing_shift, check_list_text='–ß–µ–∫-–ª–∏—Å—Ç - –∑–∞–∫—Ä—ã—Ç–∏–µ')

    await bot.send_message(
        chat_id=tgId,
        text='–ß–µ–∫-–ª–∏—Å—Ç - –∑–∞–∫—Ä—ã—Ç–∏–µ',
        reply_markup=await keyboards.check_list.check_list_keyboard(list_closing_shift, 0)
    )